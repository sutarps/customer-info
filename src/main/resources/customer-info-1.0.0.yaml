openapi: 3.0.0
info:
  title: Customer Information API
  description: API for managing customer information in a retail domain.
  version: 1.0.0
servers:
  - url: http://api.example.com/v1
    description: Main (production) server
paths:
  /customers:
    get:
      tags:
        - CustomerAPI
      summary: Get all customers
      operationId: getAllCustomers
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
  /customers/create:
    post:
      tags:
        - CustomerAPI
      summary: Create a new customer
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
  /customers/{customerId}:
    get:
      tags:
        - CustomerAPI
      summary: Get a customer by ID
      operationId: getCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    put:
      tags:
        - CustomerAPI
      summary: Update a customer by ID
      operationId: updateCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    delete:
      tags:
        - CustomerAPI
      summary: Delete a customer by ID
      operationId: deleteCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Customer deleted successfully
          content:
            application/json:
              schema:
                type: string

components:
  schemas:

    Customer:
      type: object
      properties:
        customerId:
          type: integer
          format: int64
          description: Unique identifier for the customer
        firstName:
          type: string
          description: First name of the customer
        lastName:
          type: string
          description: Last name of the customer
        dateOfBirth:
          type: string
          format: date
        email:
          type: string
          description: Email address of the customer
        createAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        phone:
          type: string
          description: Phone number of the customer
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        contactDetails:
          type: array
          items:
            $ref: '#/components/schemas/ContactDetails'

    ContactDetails:
      type: object
      properties:
        contactId:
          type: integer
          format: int64
        customerId:
          type: integer
          format: int64
        email:
          type: string
        phone:
          type: string
        contactType:
          type: string
          enum:
            - primary
            - secondary
            - home
            - office

    Address:
      type: object
      properties:
        addressId:
          type: integer
          format: int64
        addressType:
          type: string
          enum:
            - primary
            - secondary
            - home
            - office
        customerId:
          type: integer
          format: int64
          description: Customer Id
        houseNo:
          type: string
          description: House / Door Number
        street:
          type: string
          description: Street address
        city:
          type: string
          description: City
        state:
          type: string
          description: State
        postalCode:
          type: string
          description: Postal code
        country:
          type: string
          description: Country

    Error:
      type: object
      properties:
        errorCode:
          type: integer
          format: int32
        errorMessage:
          type: string
